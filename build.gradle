apply plugin: 'java'
apply plugin: 'application'

repositories {
    jcenter()
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    compile 'org.apache.commons:commons-math3:3.6'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.zeromq:jeromq:0.3.5'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.+"
}

//startScripts {
//
//    // Support closures to add an additional element to
//    // CLASSPATH definition in the start script files.
//    def configureClasspathVar = { findClasspath, pathSeparator, line ->
//
//        // Looking for the line that starts with either CLASSPATH=
//        // or set CLASSPATH=, defined by the findClasspath closure argument.
//        line = line.replaceAll(~/^${findClasspath}=.*$/) { original ->
//
//            // Get original line and append it
//            // with the configuration directory.
//            // Use specified path separator, which is different
//            // for Windows or Unix systems.
//            original += "${pathSeparator}\$APP_HOME/log4j2.xml"
//        }
//
//    }
//
//    def configureUnixClasspath = configureClasspathVar.curry('CLASSPATH', ':')
//    def configureWindowsClasspath = configureClasspathVar.curry('set CLASSPATH', ';')
//
//    // The default script content is generated and
//    // with the doLast method we can still alter
//    // the contents before the complete task ends.
//    doLast {
//
//        // Alter the start script for Unix systems.
//        unixScript.text =
//                unixScript
//                        .readLines()
//                        .collect(configureUnixClasspath)
//                        .join('\n')
//
//        // Alter the start script for Windows systems.
//        windowsScript.text =
//                windowsScript
//                        .readLines()
//                        .collect(configureWindowsClasspath)
//                        .join('\r\n')
//
//    }
//
//}

task upload(type: Exec, dependsOn: distTar) {
    def file = project.buildDir.absolutePath + '/distributions/caesar.tar'
    commandLine 'python3', 'copy_to_s3.py', 'caesar-hyflow', file
}

//applicationDefaultJvmArgs = ["-ea", "-Djava.util.concurrent.ForkJoinPool.common.parallelism=100"]
applicationDefaultJvmArgs = ["-Xmx25g", "-Xms20g", "-ea"]


mainClassName = "hyflow.main.Main"